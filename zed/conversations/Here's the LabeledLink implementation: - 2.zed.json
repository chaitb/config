{"id":"809e14ab-00f8-44c6-b8cc-bf66bcc3cfc9","zed":"context","version":"0.4.0","text":"implement LabeledLink similar to DefaultLink in visx/nextwork\n```tsx 1p-quiz/app/routes/admin/questionGraph.tsx\n/**\n * Loads the questions and returns a graph of the questions\n * Reuses data from the questions loader\n */\n\nimport { LoaderFunctionArgs, useLoaderData } from \"react-router\";\nimport { getAllQuestions } from \"~/db.server/queries/questionQueries\";\nimport { initDB } from \"~/db.server/db\";\nimport { Graph, DefaultLink } from \"@visx/network\";\nimport { Group } from \"@visx/group\";\nimport { Text } from \"@visx/text\";\nimport { useState } from \"react\";\n\nexport const loader = async ({ context }: LoaderFunctionArgs) => {\n  const db = initDB(context.cloudflare.env);\n  const questions = await getAllQuestions(db);\n  return { questions };\n};\n\ntype QuestionNodeFormat = {\n  x: number;\n  y: number;\n  id: number;\n  text: string;\n};\n\n/**\n * Renders a graph of the questions\n * Each question is a node\n * Each link is to another question, and writes the chance of going to the question\n * Each question covers a range of 500px horizontally\n * @returns\n */\nexport default function QuestionGraph() {\n  const { questions } = useLoaderData<typeof loader>();\n  const [activeNode, setActiveNode] = useState<number | null>(null);\n\n  const nodes = new Map<number, QuestionNodeFormat>();\n  const links = [];\n\n  // calculate the x and y positions of each node\n  for (const [i, question] of questions.entries()) {\n    const node = {\n      x: 200 + (i % 5) * 200,\n      y: 50 + i * 100 - Math.floor(i / 5) * 300,\n      id: question.id,\n      text: question.text,\n    };\n    nodes.set(question.id, node);\n  }\n\n  // create the links between the nodes\n  for (const [_i, question] of questions.entries()) {\n    const node = nodes.get(question.id);\n    const nextId = question.content.next?.[0]?.id;\n    const next = nextId ? nodes.get(nextId) : undefined;\n    if (next) {\n      links.push({\n        source: node,\n        target: next,\n      });\n    }\n  }\n\n  const nodesAndLinks = { nodes: Array.from(nodes.values()), links };\n  return (\n    <div className=\"mx-auto max-w-screen-xl\">\n      <h2 className=\"text-center text-2xl font-bold mb-4\">Question Graph</h2>\n      <div className=\"overflow-scroll\">\n        <svg width={1200} height={5000} className=\"mx-auto\">\n          <Graph\n            graph={nodesAndLinks}\n            linkComponent={LabeledLink}\n            nodeComponent={QuestionNode}\n          />\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nfunction QuestionNode({ node }: { node: QuestionNodeFormat }) {\n  return (\n    <Group className=\"group\">\n      <circle r={26} fill=\"#07d\" />\n      <Text fill=\"#fff\" textAnchor=\"middle\" dy={6} fontFamily=\"sans-serif\">\n        {node.id}\n      </Text>\n      <text\n        fill=\"#fff\"\n        textAnchor=\"middle\"\n        dy={30}\n        fontFamily=\"monospace\"\n        y={30}\n        className=\"hidden group-hover:block\"\n      >\n        {node.text.split(\"/\").map((t) => (\n          <tspan x={0} dy={18} key={t}>\n            {t.slice(0, 48)}\n          </tspan>\n        ))}\n      </text>\n    </Group>\n  );\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere's an implementation of `LabeledLink` similar to `DefaultLink` in visx/network:\n\n```tsx\nfunction LabeledLink({ link }: { link: { source: QuestionNodeFormat; target: Question\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2122}}},{"id":{"replica_id":0,"value":181},"start":3060,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2123}}},{"id":{"replica_id":0,"value":182},"start":3238,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2124}}}],"summary":"Here's the LabeledLink implementation:","slash_command_output_sections":[]}